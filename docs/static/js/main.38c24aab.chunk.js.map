{"version":3,"sources":["hooks/useTodos.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoContext","createContext","todos","addTodo","removeTodo","useTodosManager","initialTodos","useReducer","state","action","type","id","length","text","done","filter","Error","dispatch","useCallback","TodosProvider","children","Provider","value","useTodos","useContext","Heading","title","Box","style","padding","fontWeight","Button","rest","backgroundColor","color","border","fontSize","UL","items","render","itemClick","map","item","index","onClick","App","newTodoRef","useRef","onAddTodo","current","alert","todo","ref","JustShowTodos","AppWrapper","display","gridTemplateColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38c24aab.chunk.js","sourcesContent":["import React, { useCallback, useReducer, createContext, useContext } from \"react\";\r\n\r\ntype ActionType =\r\n| { type: \"ADD\", text: string }\r\n| { type: \"REMOVE\", id: number }\r\n\r\n\r\ninterface Todo {\r\n    id: number,\r\n    done: boolean,\r\n    text: string\r\n}\r\n\r\ntype UseTodosManagerResult = ReturnType<typeof useTodosManager>\r\n\r\nconst TodoContext = createContext<UseTodosManagerResult>({\r\n  todos: [],\r\n  addTodo: () => {},\r\n  removeTodo: () => {},\r\n})\r\n\r\nexport const useTodosManager = (initialTodos: Todo[]):  {\r\n    todos: Todo[];\r\n    addTodo: (text: string) => void;\r\n    removeTodo: (id: number) => void;\r\n} => {\r\n    const [todos, dispatch] = useReducer(\r\n        (state: Todo[], action: ActionType) => {\r\n          switch (action.type) {\r\n            case \"ADD\":\r\n              \r\n              return [\r\n                ...state,\r\n                {\r\n                  id: state.length,\r\n                  text: action.text,\r\n                  done: false\r\n                }\r\n              ]\r\n            \r\n            case \"REMOVE\":\r\n              \r\n              return state.filter(({ id }) => id !== action.id)\r\n          \r\n            default:\r\n              throw new Error()\r\n          }\r\n        }, initialTodos);\r\n\r\n        const addTodo = useCallback((text: string) => {\r\n            dispatch({\r\n                type: 'ADD',\r\n                text\r\n            })\r\n        }, [])\r\n\r\n        const removeTodo = useCallback((id: number) => {\r\n            dispatch({\r\n                type: 'REMOVE',\r\n                id\r\n            })\r\n        }, [])\r\n\r\n    return { todos, addTodo, removeTodo }\r\n}\r\n\r\nexport const TodosProvider: React.FunctionComponent<{\r\n  initialTodos: Todo[]\r\n}> = ({ initialTodos, children }) => (\r\n  <TodoContext.Provider value={useTodosManager(initialTodos)}>\r\n    { children }\r\n  </TodoContext.Provider>\r\n)\r\n\r\nexport const useTodos = (): Todo[] => {\r\n  const { todos } = useContext(TodoContext);\r\n  return todos;\r\n}\r\n\r\nexport const useAddTodo = (): UseTodosManagerResult[\"addTodo\"] => {\r\n  const { addTodo } = useContext(TodoContext);\r\n  return addTodo;\r\n}\r\n\r\nexport const useRemoveTodo = (): UseTodosManagerResult[\"removeTodo\"] => {\r\n  const { removeTodo } = useContext(TodoContext);\r\n  return removeTodo;\r\n}","import React, { useCallback, useRef } from \"react\";\nimport { useTodos, TodosProvider, useAddTodo, useRemoveTodo } from \"./hooks/useTodos\";\nimport \"./App.css\";\n\nconst Heading = ({ title }: { title: string }) => <h2>{title}</h2>;\n\nconst Box: React.FunctionComponent = ({ children }) => (\n  <div\n    style={{\n      padding: \"1rem\",\n      fontWeight: \"bold\",\n    }}\n  >\n    {children}\n  </div>\n);\n\n// ++++++++ Interface ++++++++++++\n\nconst Button: React.FunctionComponent<\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  > & {\n    title?: string;\n  }\n> = ({ title, children, style, ...rest }) => (\n  <button\n    {...rest}\n    style={{\n      ...style,\n      backgroundColor: \"red\",\n      color: \"white\",\n      border: \"none\",\n      fontSize: \"xx-large\",\n    }}\n  >\n    {title ?? children}\n  </button>\n);\n\nfunction UL<T>({\n  items,\n  render,\n  itemClick,\n}: React.DetailedHTMLProps<\nReact.HTMLAttributes<HTMLUListElement>,\nHTMLUListElement\n> & {\n  items: T[];\n  render: (item: T) => React.ReactNode;\n  itemClick: (item: T) => void\n}) {\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li onClick={() => itemClick(item)} key={index}>{render(item)}</li>\n      ))}\n    </ul>\n  );\n}\n\nfunction App() {\n  const todos = useTodos();\n  const addTodo = useAddTodo();\n  const removeTodo = useRemoveTodo();\n\n  const newTodoRef = useRef<HTMLInputElement>(null);\n\n  const onAddTodo = useCallback(() => {\n    if (newTodoRef.current) {\n      addTodo(newTodoRef.current.value);\n      newTodoRef.current.value = \"\";\n    }\n  }, [addTodo]);\n\n  return (\n    <div>\n      <Heading title=\"Introduccion\" />\n      <Box>hello There</Box>\n\n      <Heading title=\"Todos\" />\n      <UL\n        itemClick={(item) => alert(item.id)}\n        items={ todos }\n        render={(todo) => (\n          <>\n            {todo.text}\n            <button onClick={() => removeTodo(todo.id)}>Remove</button>\n          </>\n        )}\n      />\n      <div>\n        <input type=\"text\" ref={newTodoRef} />\n        <Button onClick={onAddTodo}>Add Todo</Button>\n      </div>\n    </div>\n  );\n}\n\nconst JustShowTodos = () => {\n  const todos = useTodos();\n  return (\n    <UL\n      items={ todos }\n      itemClick={() => {}}\n      render={(todo) => <>{todo.text}</>}\n    />\n  )\n}\n\nconst AppWrapper = () => (\n  <TodosProvider initialTodos={[\n    { id: 0, text: \"Helouda useContext\", done: false },\n  ]}>\n    <div style={{\n      display: \"grid\",\n      gridTemplateColumns: \"50% 50%\"\n    }}>\n      <App></App>\n      <JustShowTodos />\n    </div>\n  </TodosProvider>\n)\n\nexport default AppWrapper;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}